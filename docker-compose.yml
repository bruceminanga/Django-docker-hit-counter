# docker-compose.yml
version: "3.8" # Specify compose file version

services:
  # Inside services:
  nginx:
    image: nginx:alpine # Use official Nginx image
    volumes:
      # Mount our custom Nginx config read-only
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      # Mount the shared static volume read-only
      - staticfiles:/vol/static:ro
    ports:
      # Map host port 80 to Nginx container port 80
      - "80:80" # <-- Access via standard HTTP port now!
    depends_on:
      - web # Nginx needs the web service to be (at least starting) up
  # Service 1: PostgreSQL Database
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/ # Mount named volume for persistence

    environment:
      # Use variables loaded from .env file
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    # Expose port only if you need to connect from your host machine directly (optional)
    # ports:
    #   - "5432:5432"

  # Service 2: Django Web Application
  web:
    build: . # Build the image from Dockerfile in the current directory

    volumes:
      - .:/app # Mount current directory into /app for live code changes (bind mount)
      - staticfiles:/app/staticfiles # Mount static volume to STATIC_ROOT

    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: db # Still use service name here
      POSTGRES_PORT: 5432 # Can still be hardcoded or put in .env
      # Add Django specific vars from .env
      SECRET_KEY: ${DJANGO_SECRET_KEY}
      DEBUG: ${DEBUG}
    depends_on:
      - db # Wait for the db service container to START (not necessarily be ready)

# Define named volumes
volumes:
  postgres_data:
  staticfiles:
    # Docker manages this volume. Data persists even if 'db' container is removed.
